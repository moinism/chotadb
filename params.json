{"name":"Chotadb","tagline":"A wrapper over window.localStorage to turn it into a No-SQL DB.","body":"# ChotaDB\r\n\r\n> A wrapper over `window.localStorage` to use it as No-SQL DB.\r\n\r\nChotaDB provides a simple and elegant API to interface with `localStorage`. `localStorage` is already a great way to store and access user data but it only supports `string` to be stored. What if you could store objects and use it like a DB; create collections (like MongoDB), insert records, search, sort, update, remove ...?\r\n\r\n#### Quick look:\r\nChotaDB provide methods for complete CRUDS operations.\r\n\r\n````javascript\r\nvar DB = ChotaDB();\r\n\r\nDB.create('Users')\r\n  .insert({ name: 'Moin' })\r\n  .find({ name: 'Moin' })\r\n  .update({ name: 'Moin Uddin'})\r\n  .remove();\r\n\r\nDB.drop('Users');\r\n````\r\nNice, eh!\r\n\r\n#### Why over localStorage?\r\n\r\n`localStorage` is massively supported in browsers and devices currently being used and has a storage capacity <a href=\"http://www.html5rocks.com/en/tutorials/offline/quota-research/\" target=\"_blank\">ranging from 2MB to 10MB</a>. So why not use it in more powerful way!\r\n\r\n### Why use it?\r\n\r\n * Of course, to store data on client-side\r\n * Cache\r\n * Store a copy of server DB locally for faster access\r\n * User's settings\r\n * Finally something to use in hybrid apps. e.g.: Cordova\r\n * Whatever reason you were using `localStorage` for.\r\n\r\n\r\n### On this page\r\n\r\n* [Support/Compatibility](#supportcompatibility)\r\n* [Concepts](#concepts)\r\n  * [Storing](#storing)\r\n  * [Accessing](#accessing)\r\n  * [Events](#events)\r\n* [How to use it](#how-to-use-it)\r\n  * [Installation](#installation)\r\n  * [Usage](#usage)\r\n    * [Create a new collection (same as table in SQL)](#create-a-new-collection-same-as-table-in-sql)\r\n    * [Insert a record](#insert-a-record)\r\n    * [Search records](#search-records)\r\n    * [Update records](#update-records)\r\n    * [Remove records](#remove-records)\r\n* [To do](#to-do)\r\n* [Resources](#resources)\r\n\r\n\r\n## Support/Compatibility\r\n\r\nAs this library depends upon the availability of `localStorage` so wherever you can use `localStorage`, you can use `ChotaDB` too.\r\n\r\nFortunately for us, `localStorage` is supported on a wide array of devices and browsers.\r\n\r\nIt has been <a href=\"https://developer.mozilla.org/en/docs/Web/API/Window/localStorage#Browser_compatibility\" target=\"_blank\">supported in browsers</a> since:\r\n\r\n  * Chrome 4\r\n  * FireFox 3.5\r\n  * IE 8\r\n  * Opera 10.50\r\n  * Safari 4\r\n\r\nIn addition to these browsers, ChotaDB is also supported in:\r\n\r\n  * NodeJS\r\n  * Chrome Extensions/Apps\r\n  * __Cordova__ (yay!) :sparkles:\r\n  * <a href=\"http://electron.atom.io/\" target=\"_blank\">Electron</a>\r\n\r\n\r\n## Concepts\r\n\r\nChotaDB tries to follow the same concepts used in MongoDB. Similar to Mongo, you can create collections (known as tables in SQL) to store data.\r\n\r\n### Storing\r\nEach data record (documents in Mongo and rows in SQL) is stored as an `object` in collections. In other words, a collection is an `array` of `objects`.\r\nSo a typical collection may look like:\r\n\r\n````\r\n[record, record, ..., record]\r\n````\r\n\r\nYour data (record) can have any schema you like. You can store objects, strings, numbers, arrays and booleans. In one collection, your records do not need to follow the same schema as previous one.\r\n\r\nFor example:\r\n\r\nIf you insert one record as:\r\n\r\n````javascript\r\nDB.Users.insert({\r\n  name: 'Moin'\r\n});\r\n````\r\n\r\nAnd second one as:\r\n\r\n````javascript\r\nDB.Users.insert({\r\n  first_name: 'Moin',\r\n  age: 20\r\n});\r\n````\r\n\r\nIt is completely fine and won't produce any errors. All the data is encoded to JSON and then stored in `localStorage`.\r\n\r\n### Accessing\r\n\r\nSimilar to Mongo's cursor, ChotaDB creates a set of data for operations. Every method called on a collection can access and modify that set.\r\n\r\nFor example, current data set in a collection named `guys` looks like this:\r\n\r\n```javascript\r\n[{\r\n  _id: 1,\r\n  name: \"John\",\r\n  age: 16\r\n},{\r\n  _id: 2,\r\n  name: \"Doe\",\r\n  age: 18\r\n}\r\n},{\r\n  _id: 3,\r\n  name: \"Smith\",\r\n  age: 22\r\n}]\r\n```\r\n\r\nAnd we perform a `find` on it to search for all the guys who are 18 years of age or older:\r\n```javascript\r\nDB.guys.find({\r\n  age: {\r\n    $gte: 18\r\n  }\r\n});\r\n```\r\n\r\nData set would become:\r\n\r\n```javascript\r\n[{\r\n  _id: 2,\r\n  name: \"Doe\",\r\n  age: 18\r\n}\r\n},{\r\n  _id: 3,\r\n  name: \"Smith\",\r\n  age: 22\r\n}]\r\n```\r\n\r\nSo all the operations performed will affect this set only. Let's say we update it and add a field name `isAdult` to all those.\r\n\r\n```javascript\r\nDB.guys.find({\r\n  age: {\r\n    $gte: 18\r\n  }\r\n}).update({\r\n  isAdult: true\r\n});\r\n```\r\n\r\nCurrent data set would something like:\r\n\r\n```javascript\r\n[{\r\n  _id: 2,\r\n  name: \"Doe\",\r\n  age: 18,\r\n  isAdult: true\r\n}\r\n},{\r\n  _id: 3,\r\n  name: \"Smith\",\r\n  age: 22,\r\n  isAdult: true\r\n}]\r\n```\r\n\r\nAll the methods on a collection would perform operation on data and return the collection itself except `get` and `count` which return the current data set and number of records in it, respectively.\r\n\r\nAll the data will be returned as an `array` of `objects`. Like:\r\n\r\n````\r\n[object, object, ..., object]\r\n````\r\n\r\nChotaDB supports method chaining, promises, synchronous as well as asynchronous execution for some methods.\r\n\r\n### Events\r\n\r\nChotaDB supports a set of that you can subscribe to.\r\n\r\n  * `error` : When there is an error execution of any command\r\n  * `created` : When a new collection is created\r\n  * `inserted` : When a new record is inserted into a collection\r\n  * `updated` : When a record is changed\r\n  * `removed` : When a record is removed from a collection\r\n  * `dropped` : When a collection is dropped/deleted\r\n\r\nMore details about events can be read on [API wiki site](https://github.com/moinism/chotadb/wiki/Events).\r\n\r\nYou can use the `on` method on `ChotaDB` instance to subscribe to any event.\r\n\r\n```javascript\r\n  var DB = ChotaDB();\r\n\r\n  DB.on('error', function(err) {\r\n    console.error(err);\r\n  }).on('created', function(res) {\r\n    console.log(res);\r\n  }).on('inserted', function(res) {\r\n    console.log(res);\r\n  }).on('updated', function(res) {\r\n    console.log(res);\r\n  }).on('removed', function(res) {\r\n    console.log(res);\r\n  }).on('dropped', function(res) {\r\n    console.log(res);\r\n  });\r\n```\r\n\r\n\r\n## How to use it\r\n\r\n### Installation\r\n\r\nInstall it via package managers:\r\n\r\n__Bower__:\r\n\r\n````bash\r\nbower install chotadb\r\n````\r\n\r\nThen include in your file:\r\n\r\n\r\n````html\r\n<script type=\"text/javascript\" src=\"bower_components/chotadb/build/chotadb.min.js\"></script>\r\n````\r\n\r\n\r\nIn __NodeJS__:\r\n\r\n````bash\r\nnpm install chotadb\r\n````\r\n\r\nThen require it like:\r\n\r\n````javascript\r\nvar ChotaDB = require('chotadb');\r\n````\r\n\r\nFor other web, Cordova & Chrome based projects simply <a href=\"https://raw.githubusercontent.com/moinism/chotadb/master/build/chotadb.min.js\" target=\"_blank\">download</a> and include the file in your pages:\r\n\r\n````html\r\n<script src=\"chotadb.min.js\"></script>\r\n````\r\n\r\n### Usage\r\n\r\nBelow is an quick overview of what can be done with ChotaDB. For more details, please [read API docs](https://github.com/moinism/chotadb/wiki).\r\n\r\nStart with creating an instance of `ChotaDB`:\r\n\r\n````javascript\r\nvar Store = new ChotaDB();\r\n````\r\n\r\n##### Create a new collection (same as table in SQL):\r\n\r\n````javascript\r\nvar Emails = Store.create('Emails');\r\n````\r\nIf a collection already exists with the same name then its instance will be returned.\r\n\r\nOnce a collection is created it becomes a `property` on `DB` instance. So in this case, you can also access it via `Store.Emails`.\r\n\r\n##### Insert a record:\r\n\r\n````javascript\r\nStore.Emails.insert({\r\n  title: 'Re: New DB for client-side data',\r\n  from: 'me@moin.im',\r\n  tags: ['Personal','JS','Client-side'],\r\n  time: Date.now(),\r\n  isRead: false\r\n}).then(function(){\r\n  console.log('Email arrived.');\r\n});\r\n````\r\n\r\nData inserted into the collection would look something like this:\r\n\r\n````javascript\r\n{\r\n  _id: 1,\r\n  title: \"Re: New DB for client-side data\",\r\n  from: \"me@moin.im\",\r\n  tags: ['Personal','JS','Client-side'],\r\n  time: 1451302067412,\r\n  isRead: false\r\n}\r\n````\r\n\r\nNotice the extra `_id` key. It is a reserved key name and is used by ChotaDB to take care of unique and auto-incrementing ID for records in a collection.\r\nIt is different from MongoDB because MongoDB creates a 12 byte (24 hex characters) string for `_id` but ChotaDB creates an integer.\r\n\r\n> You cannot set or change the `_id`. It will be overwritten even if you did. Use any other key name like `id` if you have to.\r\n\r\n##### Search records:\r\nEach collections has a method `find` which can be used for searching.\r\n\r\nSo for example we wanted to know the number of emails which are unread we'll do something like this:\r\n\r\n````javascript\r\nStore.Emails.find({\r\n  isRead: false\r\n}).count(function(total){\r\n  console.log('You have', total, 'unread emails.');\r\n});\r\n````\r\n`find` will look for all the records having their `isRead` set to `false`.\r\n\r\nIf we wanted to access all the emails, we'll call `find` without any search criteria (`object`) being passed to it.\r\n\r\n````javascript\r\nStore.Emails.find().each(function(email){\r\n  console.log('Email:', email.title);\r\n});\r\n````\r\n`each` iterates over all the records returned.\r\n\r\nIf we wanted to find the ones having `JS` tag\r\n\r\n````javascript\r\nStore.Emails.find({\r\n  tags: 'JS'\r\n}).each(function(email){\r\n  console.log('JS Email:', email.title);\r\n});\r\n````\r\n\r\nOr the ones having both `Personal` & `JS` tags.\r\n\r\n````javascript\r\nStore.Emails.find({\r\n  tags: ['Personal', 'JS']\r\n}).each(function(email){\r\n  console.log('Personal JS Email:', email.title);\r\n});\r\n````\r\n\r\n##### Update records:\r\nTo update a record, `update` method can be chained to `find` to update all the records returned by `find`.\r\n\r\nSo for example, we want all the unread emails to be marked as read\r\n\r\n````javascript\r\nStore.Emails.find({\r\n  isRead: false\r\n}).update({\r\n  isRead: true\r\n}).then(function(){\r\n  console.log('All the emails are marked as read.');\r\n});\r\n````\r\n\r\n##### Remove records:\r\nLet's delete all the emails older than a month.\r\n\r\n````javascript\r\nvar nowTime = Date.now();\r\nStore.Emails.find().filter(function(record){\r\n  if( nowTime - record.time >= 2678400000) // 31 days\r\n    return true; // we want to keep this record for next method i.e: remove\r\n})\r\n.remove() // remove the ones we filtered\r\n.then(function(){\r\n  console.log('You do not have any emails older than a month.');\r\n});\r\n````\r\n\r\n### Resources\r\n\r\nFor further reading and a deeper look into how to use ChotaDB, please read [API docs](https://github.com/moinism/chotadb/wiki).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}